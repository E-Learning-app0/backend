# NGINX Configuration for E-Learning App
error_log "C:/Users/ASUS/Desktop/E-learning_app/backend/logs/error.log";

events {
    worker_connections 1024;
}

http {
    # Access log inside http block
    access_log "C:/Users/ASUS/Desktop/E-learning_app/backend/logs/access.log";
    
    # Temporary directories
    client_body_temp_path "C:/Users/ASUS/Desktop/E-learning_app/backend/temp/client_body_temp";
    proxy_temp_path "C:/Users/ASUS/Desktop/E-learning_app/backend/temp/proxy_temp";
    fastcgi_temp_path "C:/Users/ASUS/Desktop/E-learning_app/backend/temp/fastcgi_temp";
    uwsgi_temp_path "C:/Users/ASUS/Desktop/E-learning_app/backend/temp/uwsgi_temp";
    scgi_temp_path "C:/Users/ASUS/Desktop/E-learning_app/backend/temp/scgi_temp";
    
    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    client_max_body_size 100M;  # For video uploads
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml;

    # Rate limiting for security
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/s;

    # Upstream services
    upstream auth_service {
        server 127.0.0.1:8001;
        # Add more instances for load balancing
        # server 127.0.0.1:8011;
    }

    upstream content_service {
        server 127.0.0.1:8002;
        # server 127.0.0.1:8012;
    }

    # Payment service upstream - Not implemented yet
    # upstream payment_service {
    #     server 127.0.0.1:8005;
    #     # server 127.0.0.1:8015;
    # }

    upstream agent_service {
        server 127.0.0.1:8004;
        # server 127.0.0.1:8014;
    }

    server {
        listen 8000;
        server_name localhost;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;

    # Enable CORS for your frontend (fix multiple origins)
    set $cors_origin "";
    if ($http_origin ~* "^https?://(localhost:5173|frontend-five-pi-35\.vercel\.app)$") {
        set $cors_origin $http_origin;
    }
    
    add_header Access-Control-Allow-Origin $cors_origin always;
    add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
    add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With" always;
    add_header Access-Control-Allow-Credentials "true" always;

    # Handle preflight requests
    if ($request_method = 'OPTIONS') {
        return 204;
    }

    # Critical refresh endpoint (most important!)
    location /api/v1/refresh {
        proxy_pass http://auth_service/api/v1/refresh;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Authorization $http_authorization;
        proxy_set_header Content-Type $content_type;
        
        # Timeout settings for token refresh
        proxy_connect_timeout 5s;
        proxy_send_timeout 10s;
        proxy_read_timeout 10s;
    }

        # Auth service routes (with rate limiting)
        location /api/v1/login {
            limit_req zone=auth burst=3 nodelay;
            proxy_pass http://auth_service/api/v1/login;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Authorization $http_authorization;
        }

        location /api/v1/register {
            limit_req zone=auth burst=2 nodelay;
            proxy_pass http://auth_service/api/v1/register;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /api/v1/users/ {
            limit_req zone=api burst=5 nodelay;
            proxy_pass http://auth_service/api/v1/users/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Authorization $http_authorization;
        }

        # Content service routes - Direct module access
        location /api/v1/modules/ {
            limit_req zone=api burst=10 nodelay;
            proxy_pass http://content_service/modules/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Authorization $http_authorization;
            
            # Special handling for file uploads
            client_max_body_size 500M;
            proxy_request_buffering off;
        }

        # Content service routes - Direct lesson access
        location /api/v1/lessons/ {
            limit_req zone=api burst=10 nodelay;
            proxy_pass http://content_service/lessons/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Authorization $http_authorization;
            
            # Special handling for file uploads
            client_max_body_size 500M;
            proxy_request_buffering off;
        }

        # Content service routes - General fallback
        location /api/v1/content/ {
            limit_req zone=api burst=10 nodelay;
            proxy_pass http://content_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Authorization $http_authorization;
            
            # Special handling for file uploads
            client_max_body_size 500M;
            proxy_request_buffering off;
        }

        # Payment service routes - Not implemented yet
        # location /api/v1/payment/ {
        #     limit_req zone=api burst=5 nodelay;
        #     proxy_pass http://payment_service/api/v1/;
        #     proxy_set_header Host $host;
        #     proxy_set_header X-Real-IP $remote_addr;
        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        #     proxy_set_header Authorization $http_authorization;
        # }

        # Agent service routes
        location /api/v1/agent/ {
            limit_req zone=api burst=10 nodelay;
            proxy_pass http://agent_service/api/v1/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Authorization $http_authorization;
            
            # Special handling for AI/agent requests (may take longer)
            proxy_connect_timeout 10s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # Health check
        location /health {
            access_log off;
            return 200 '{"status":"healthy","service":"nginx-gateway","timestamp":"$time_iso8601"}';
            add_header Content-Type application/json;
        }

        # Favicon handling
        location /favicon.ico {
            access_log off;
            log_not_found off;
            return 204;
        }
    }
}
